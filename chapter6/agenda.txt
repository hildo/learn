Page 59 in PDF doc.

A function that takes a function as parameters or returns a function is a higher order function. Higher order functions are really the essence of functional programming

Curried functions
=================

Every function takes ONLY 1 PARAMETER
Functions that take more than one do so using a clever trick - Curried Functions
Named after Haskell Curry
max 4 5 is really just (max 4) 5
Use t: to see for yourself
	eg. max :: (Ord a) => a -> a -> a 
	    is really just
	    max :: (Ord a) => a -> (a -> a)
Partially applied functions are returned when we call a function with too few parameters.
	- They take as many parameters as we left out 
Think of functions as tiny factories 
	- take materials and product something
	- that something can be another smaller factory
	- Google "How I taught my kids functional programming" for a funny Dr Seuss/Sneechers example

SECTIONS

Partial application for infix functions
To section an infix function surround with parentheses and supply parameter on one side only
What out for negative
	- (-4) is not sectioned - it's negative 4
	- Use "subtract" function instead if you want to do this

PRINTING FUNCTIONS

You can't print partially applied function as they aren't instances of the Show type class. Kind of obvious really! 

Some higher-orderism is in order
================================

applyTwice :: (a -> a) -> a -> a
	- Need parenthesis as -> is right associative
We now know that multiple parameters is a trick - but book will still call it that.

ZIPWITH

Note - lists don't have to be of the same type, the function just has to handle those types that's all.... nice.

FLIP

The Functional Programmerâ€™s Toolbox
===================================

MAP

Should be quite familiar - version in groovy, ruby, python etc.
Applies function to every element in list
	map :: (a -> b) -> [a] -> [b]
Can be achieved with list comprehension but map function makes for better readability (especially when nested)

FILTER

Similar to map but takes a predicate (a function that tells if something is true or false) and returns members of list that satisy it
	filter :: (a -> Bool) -> [a] -> [a]
Same as map - can be written as list comprehension. Which to pick? - all about readability
Filter in quicksort example 

MORE EXAMPLES OF MAP AND FILTER

Use filter with head to extract max 
	lazyness means it doesn't have to filter the whole list so not a bad solution.
Collatz chain example
	

MAPPING FUNCTIONS WITH MULTIPLE PARAMETERS


Lambdas
=======

Only folds and horses
=====================

I Fold You So
_____________

Left Folds with foldl
_____________________

Right Folds with foldr
______________________

The foldl and foldr1 Functions
______________________________

Some Fold Examples
__________________

Another Way to Look at Folds
____________________________

Folding Infinite Lists
______________________

Scans
_____

Function application with $
===========================

Function composition
====================

Function Composition with Multiple Parameters
Point-Free Style
